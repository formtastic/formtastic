h1. Formtastic

Formtastic is a Rails FormBuilder DSL (with some other goodies) to make it far easier to create beautiful, semantically rich, syntactically awesome, readily stylable and wonderfully accessible HTML forms in your Rails applications.

<a href='http://www.pledgie.com/campaigns/2178'><img alt='Click here to lend your support to: formtastic and make a donation at www.pledgie.com !' src='http://pledgie.com/campaigns/2178.png?skin_name=chrome' border='0' /></a>

h2. The Story

One day, I finally had enough, so I opened up my text editor, and wrote a DSL for how I'd like to author forms:

<pre>
  <% semantic_form_for @article do |form| %>

    <% form.inputs :name => "Basic" do %>
      <%= form.input :title %>
      <%= form.input :body %>
      <%= form.input :section %>
      <%= form.input :publication_state, :as => :radio %>
      <%= form.input :category %>
      <%= form.input :allow_comments, :label => "Allow commenting on this article" %>
    <% end %>

    <% form.inputs :name => "Advanced" do %>
      <%= form.input :keywords, :required => false, :hint => "Example: ruby, rails, forms" %>
      <%= form.input :extract, :required => false %>
      <%= form.input :description, :required => false %>
      <%= form.input :url_title, :required => false %>
    <% end %>

    <% form.inputs :name => "Author", :for => :author do |author_form| %>
      <%= author_form.input :first_name %>
      <%= author_form.input :last_name %>
    <% end %>

    <% form.buttons do %>
      <%= form.commit_button %>
    <% end %>

  <% end %>
</pre>

I also wrote the accompanying HTML output I expected, favoring something very similar to the fieldsets, lists and other semantic elements Aaron Gustafson presented in "Learning to Love Forms":http://www.slideshare.net/AaronGustafson/learning-to-love-forms-web-directions-south-07, hacking together enough Ruby to prove it could be done.


h2. It's better than _SomeOtherFormBuilder_ because...

* it can handle @belongs_to@ associations (like Post belongs_to :author), rendering a select or set of radio inputs with choices from the parent model.
* it can handle @has_many@ and @has_and_belongs_to_many@ associations (like: Post has_many :tags), rendering a multi-select with choices from the child models.
* it's Rails 2.x and 3.x compatible (including nested forms).
* it has internationalization (I18n)!
* it's _really_ quick to get started with a basic form in place (4 lines), then go back to add in more detail if you need it.
* there's heaps of elements, id and class attributes for you to hook in your CSS and JS.
* it handles real world stuff like inline hints, inline error messages & help text.
* it doesn't hijack or change any of the standard Rails form inputs, so you can still use them as expected (even mix and match).
* it's got absolutely awesome spec coverage.
* there's a bunch of people using and working on it (it's not just one developer building half a solution).


h2. Why?

* web apps = lots of forms.
* forms are so friggin' boring to code.
* semantically rich & accessible forms really are possible.
* the "V" is way behind the "M" and "C" in Rails' MVC â€“ it's the ugly sibling.
* best practices and common patterns have to start somewhere.
* i need a challenge.


h2. Opinions

* it should be easier to do things the right way than the wrong way.
* sometimes _more mark-up_ is better.
* elements and attribute hooks are _gold_ for stylesheet authors.
* make the common things we do easy, yet still ensure uncommon things are still possible.


h2. Documentation

RDoc documentation _should_ be automatically generated after each commit and made available on the "rdoc.info website":http://rdoc.info/projects/justinfrench/formtastic.


h2. Installation

Formtastic is now compatible with both Rails 2 and Rails 3, and the gem is "hosted":http://rubygems.org/gems/formtastic on RubyGems.org.

*You'll need to use Bundler (yes, even under Rails 2, due to the many ways gem dependencies suck). Follow "this tutorial":http://gembundler.com/rails23.html.*

Simply add Formtastic to your Gemfile and bundle it up:

<pre>
  gem 'formtastic', '~> 1.1.0'
</pre>

Optionally, run the generator to copy some stylesheets and a configuration initializer into your application:

<pre>
  # Rails 3:
  $ rails generate formtastic:install 
  
  # Or Rails 2:
  $ ./script/generate formtastic 
</pre>


h2. Stylesheets

A proof-of-concept stylesheet is provided which you can include in your layout. Customization is best achieved by overriding these styles in an additional stylesheet so that the Formtastic styles can be updated without clobbering your changes. If you want to use these stylesheets, add both to your layout with this helper:

<pre>
  <head>
    ...
    <%= formtastic_stylesheet_link_tag %>
    ...
  </head>
</pre>


h2. Syntax

*Please note:* Formtastic makes use of a lot of ERB blocks and currently supports both Rails 2 and Rails 3, which means the syntax in these examples will differ depending on which version of Rails you're using.

The difference is subtle, with most blocks in Rails 3 requiring the addition of an equals sign:

<pre>
  <!-- Rails 2 -->
  <% semantic_form_for @user do |form| %>
    <% form.inputs do %>
      ...
    <% end %>
  <% end %>
  
  <!-- Rails 3 -->
  <%= semantic_form_for @user do |form| %>
    <%= form.inputs do %>
      ...
    <% end %>
  <% end %>
</pre>
  
This README is currently documenting the Rails 2 way only. If you're using Rails 3 and your forms aren't rendering everything as expected, try changing @<%@ to @<%=@.


h2. Usage

Forms are really boring to code... you want to get onto the good stuff as fast as possible.

This renders a set of inputs (one for _most_ columns in the database table, and one for each ActiveRecord @belongs_to@-association), followed by a submit button:

<pre>
  <% semantic_form_for @user do |form| %>
    <%= form.inputs %>
    <%= form.buttons %>
  <% end %>
</pre>

This is a great way to get something up fast, but like scaffolding, it's not recommended for production.

You probably want to specify the order of the fields, skip some of the fields or even add in fields that Formtastic couldn't detect, you can pass in a list of field names to @inputs@ and list of button names to @buttons@:

<pre>
  <% semantic_form_for @user do |form| %>
    <%= form.inputs :title, :body, :section, :categories, :created_at %>
    <%= form.buttons :commit %>
  <% end %>
</pre>

You probably want control over the input type Formtastic uses for each field, you can expand the @inputs@ and @buttons@ blocks. This specifies the @:section@ input should be a set of radio buttons (rather than the default select box), and that the @:created_at@ field should be a string (rather than the default datetime selects):

<pre>
  <% semantic_form_for @post do |form| %>
    <% form.inputs do %>
      <%= form.input :title %>
      <%= form.input :body %>
      <%= form.input :section, :as => :radio %>
      <%= form.input :categories %>
      <%= form.input :created_at, :as => :string %>
    <% end %>
    <% form.buttons do %>
      <%= form.commit_button %>
    <% end %>
  <% end %>
</pre>

If you want to customize the label text, or render some hint text below the field, specify which fields are required/optional, or break the form into two fieldsets, the DSL is pretty comprehensive:

<pre>
  <% semantic_form_for @post do |form| %>
    <% form.inputs "Basic", :id => "basic" do %>
      <%= form.input :title %>
      <%= form.input :body %>
    <% end %>
    <% form.inputs :name => "Advanced Options", :id => "advanced" do %>
      <%= form.input :slug, :label => "URL Title", :hint => "Created automatically if left blank", :required => false %>
      <%= form.input :section, :as => :radio %>
      <%= form.input :user, :label => "Author", :label_method => :full_name %>
      <%= form.input :categories, :required => false %>
      <%= form.input :created_at, :as => :string, :label => "Publication Date", :required => false %>
    <% end %>
    <% form.buttons do %>
      <%= form.commit_button %>
    <% end %>
  <% end %>
</pre>

You can create forms for nested resources:

<pre>
	<% semantic_form_for [@author, @post] do |form| %>
</pre>

Nested forms are also supported (don't forget your models need to be setup correctly with @accepts_nested_attributes_for@). You can do it in the Rails way:

<pre>
  <% semantic_form_for @post do |form| %>
    <%= form.inputs :title, :body, :created_at %>
    <% form.semantic_fields_for :author do |author| %>
      <%= author.inputs :first_name, :last_name, :name => "Author" %>
    <% end %>
    <%= form.buttons %>
  <% end %>
</pre>

Or the Formtastic way with the @:for@ option:

<pre>
  <% semantic_form_for @post do |form| %>
    <%= form.inputs :title, :body, :created_at %>
    <%= form.inputs :first_name, :last_name, :for => :author, :name => "Author" %>
    <%= form.buttons %>
  <% end %>
</pre>

When working in has many association, you can even supply @"%i"@ in your fieldset name that it will be properly interpolated with the child index. For example:

<pre>
  <% semantic_form_for @post do |form| %>
    <%= form.inputs %>
    <%= form.inputs :name => 'Category #%i', :for => :categories %>
    <%= form.buttons %>
  <% end %>
</pre>

If you have more than one form on the same page, it may lead to HTML invalidation because of the way HTML element id attributes are assigned. You can provide
a namespace for your form to ensure uniqueness of id attributes on form elements. The namespace attribute will be prefixed with underscore on the generate html id. For example:

<pre>
  <% semantic_form_for(@post, :namespace => 'cat_form') do |form| %>
  <%= form.input :title %>        # id="cat_form_post_title"
  <%= form.input :body %>         # id="cat_form_post_body"
  <%= form.input :created_at %>   # id="cat_form_post_created_at"
  <%= form.buttons %>
  <% end %>
</pre>

Customize HTML attributes for any input using the @:input_html@ option. Typically this is used to disable the input, change the size of a text field, change the rows in a textarea, or even to add a special class to an input to attach special behavior like "autogrow":http://plugins.jquery.com/project/autogrow textareas:

<pre>
  <% semantic_form_for @post do |form| %>
    <%= form.input :title,      :input_html => {  :cols => 10 } %>
    <%= form.input :body,       :input_html => { :class => 'autogrow', :rows => 10, :cols => 20, :maxlength => 10  } %>
    <%= form.input :created_at, :input_html => { :disabled => true } %>
    <%= form.buttons %>
  <% end %>
</pre>

The same can be done for buttons with the @:button_html@ option:

<pre>
  <% semantic_form_for @post do |form| %>
    ...
    <% form.buttons do %>
      <%= form.commit_button :button_html => { :class => "primary" } %>
    <% end %>
  <% end %>
</pre>

Customize the HTML attributes for the @<li>@ wrapper around every input with the @:wrapper_html@ option hash. There's one special key in the hash (@:class@), which will actually _append_ your string of classes to the existing classes provided by Formtastic (like @"required string error"@).

<pre>
  <% semantic_form_for @post do |form| %>
    <%= form.input :title, :wrapper_html => { :class => "important" } %>
    <%= form.input :body %>
    <%= form.input :description, :wrapper_html => { :style => "display:none;" } %>
    ...
  <% end %>
</pre>

Customize the default class used for hints on each attribute or globally in the @config/formtastic.rb@ file. Similarly you can customize the error classes on an attribute level or globally.

<pre>
  <% semantic_form_for @post do |form| %>
    <%= form.input :title, :hint_class => 'custom-html-class', :error_class => 'custom-error-class' %>
  <% end %>
</pre>

Many inputs provide a collection of options to choose from (like @:select@, @:radio@, @:check_boxes@, @:boolean@). In many cases, Formtastic can find choices through the model associations, but if you want to use your own set of choices, the @:collection@ option is what you want.  You can pass in an Array of objects, an array of Strings, a Hash... Throw almost anything at it! Examples:

<pre>
  f.input :authors, :as => :check_boxes, :collection => User.find(:all, :order => "last_name ASC")
  f.input :authors, :as => :check_boxes, :collection => current_user.company.users.active
  f.input :authors, :as => :check_boxes, :collection => [@justin, @kate]
  f.input :authors, :as => :check_boxes, :collection => ["Justin", "Kate", "Amelia", "Gus", "Meg"]
  f.input :author,  :as => :select,      :collection => Author.find(:all)
  f.input :author,  :as => :select,      :collection => { @justin.name => @justin.id, @kate.name => @kate.id }
  f.input :author,  :as => :select,      :collection => ["Justin", "Kate", "Amelia", "Gus", "Meg"]
  f.input :author,  :as => :radio,       :collection => User.find(:all)
  f.input :author,  :as => :radio,       :collection => [@justin, @kate]
  f.input :author,  :as => :radio,       :collection => { @justin.name => @justin.id, @kate.name => @kate.id }
  f.input :author,  :as => :radio,       :collection => ["Justin", "Kate", "Amelia", "Gus", "Meg"]
  f.input :admin,   :as => :radio,       :collection => ["Yes!", "No"]
</pre>


h2. The Available Inputs

The Formtastic input types:

* @:select@ - a select menu. Default for ActiveRecord associations: @belongs_to@, @has_many@, and @has_and_belongs_to_many@.
* @:check_boxes@ - a set of check_box inputs. Alternative to @:select@ for ActiveRecord-associations: @has_many@, and @has_and_belongs_to_many@.
* @:radio@ - a set of radio inputs. Alternative to @:select@ for ActiveRecord-associations: @belongs_to@.
* @:time_zone@ - a select input. Default for column types: @:string@ with name matching @"time_zone"@.
* @:password@ - a password input. Default for column types: @:string@ with name matching @"password"@.
* @:text@ - a textarea. Default for column types: @:text@.
* @:date@ - a date select. Default for column types: @:date@.
* @:datetime@ - a date and time select. Default for column types: @:datetime@ and @:timestamp@.
* @:time@ - a time select. Default for column types: @:time@.
* @:boolean@ - a checkbox. Default for column types: @:boolean@.
* @:string@ - a text field. Default for column types: @:string@.
* @:numeric@ - a text field (just like string). Default for  column types: @:integer@, @:float@, and @:decimal@.
* @:file@ - a file field. Default for file-attachment attributes matching: "paperclip":http://github.com/thoughtbot/paperclip or "attachment_fu":http://github.com/technoweenie/attachment_fu.
* @:country@ - a select menu of country names. Default for column types: :string with name @"country"@ - requires a *country_select* plugin to be installed.
* @:email@ - a text field (just like string). Default for columns with name matching @"email"@. New in HTML5. Works on some mobile browsers already.
* @:url@ - a text field (just like string). Default for columns with name matching @"url"@. New in HTML5. Works on some mobile browsers already.
* @:phone@ - a text field (just like string). Default for columns with name matching @"phone"@ or @"fax"@. New in HTML5.
* @:search@ - a text field (just like string). Default for columns with name matching @"search"@. New in HTML5. Works on Safari.
* @:hidden@ - a hidden field. Creates a hidden field (added for compatibility).

The comments in the code are pretty good for each of these (what it does, what the output is, what the options are, etc.) so go check it out.


h2. Delegation for label lookups

Formtastic decides which label to use in the following order:

<pre>
  1. :label             # :label => "Choose Title"
  2. Formtastic i18n    # if either :label => true || i18n_lookups_by_default = true (see Internationalization)
  3. Activerecord i18n  # if localization file found for the given attribute
  4. label_str_method   # if nothing provided this defaults to :humanize but can be set to a custom method 
</pre>

h2. Internationalization (I18n)

h3. Basic Localization

Formtastic got some neat I18n-features. ActiveRecord object names and attributes are, by default, taken from calling @@object.human_name@ and @@object.human_attribute_name(attr)@ respectively. There are a few words specific to Formtastic that can be translated. See @lib/locale/en.yml@ for more information.

Basic localization (labels only, with ActiveRecord):

<pre>
  <% semantic_form_for @post do |form| %>
    <%= form.input :title %>        # => :label => I18n.t('activerecord.attributes.user.title')    or 'Title'
    <%= form.input :body %>         # => :label => I18n.t('activerecord.attributes.user.body')     or 'Body'
    <%= form.input :section %>      # => :label => I18n.t('activerecord.attributes.user.section')  or 'Section'
  <% end %>
</pre>

*Note:* This is perfectly fine if you just want your labels/attributes and/or models to be translated using *ActiveRecord I18n attribute translations*, and you don't use input hints and legends. But what if you do? And what if you don't want same labels in all forms?

h3. Enhanced Localization (Formtastic I18n API)

Formtastic supports localized *labels*, *hints*, *legends*, *actions* using the I18n API for more advanced usage. Your forms can now be DRYer and more flexible than ever, and still fully localized. This is how:

*1. Enable I18n lookups by default (@config/initializers/formtastic.rb@):*

<pre>
  Formtastic::SemanticFormBuilder.i18n_lookups_by_default = true
</pre>

*2. Add some cool label-translations/variants (@config/locale/en.yml@):*

<pre>
  en:
    formtastic:
      titles:
        post_details: "Post details"
      labels:
        post:
          title: "Choose a title..."
          body: "Write something..."
          edit:
            title: "Edit title"
      hints:
        post:
          title: "Choose a good title for you post."
          body: "Write something inspiring here."
      actions:
        create: "Create my %{model}"
        update: "Save changes"
        dummie: "Launch!"
</pre>

*Note:* We are using English here still, but you get the point.

*3. ...and now you'll get:*

<pre>
  <% semantic_form_for Post.new do |form| %>
    <% form.inputs do %>
      <%= form.input :title %>      # => :label => "Choose a title...", :hint => "Choose a good title for you post."
      <%= form.input :body %>       # => :label => "Write something...", :hint => "Write something inspiring here."
      <%= form.input :section %>    # => :label => I18n.t('activerecord.attributes.user.section')  or 'Section'
    <% end %>
    <% form.buttons do %>
      <%= form.commit_button %>     # => "Create my %{model}"
    <% end %>
  <% end %>
</pre>

*4. Localized titles (a.k.a. legends):*

_Note: Slightly different because Formtastic can't guess how you group fields in a form. Legend text can be set with first (as in the sample below) specified value, or :name/:title options - depending on what flavor is preferred._

<pre>
  <% semantic_form_for @post do |form| %>
    <% form.inputs :post_details do %>   # => :title => "Post details"
      # ...
    <% end %>
    # ...
<% end %>
</pre>

*5. Override I18n settings:*

<pre>
  <% semantic_form_for @post do |form| %>
    <% form.inputs do %>
      <%= form.input :title %>      # => :label => "Choose a title...", :hint => "Choose a good title for you post."
      <%= form.input :body, :hint => false %>                 # => :label => "Write something..."
      <%= form.input :section, :label => 'Some section' %>    # => :label => 'Some section'
    <% end %>
    <% form.buttons do %>
      <%= form.commit_button :dummie %>     # => "Launch!"
    <% end %>
  <% end %>
</pre>

If I18n-lookups is disabled, i.e.:

<pre>
  Formtastic::SemanticFormBuilder.i18n_lookups_by_default = false
</pre>

...then you can enable I18n within the forms instead:

<pre>
  <% semantic_form_for @post do |form| %>
    <% form.inputs do %>
      <%= form.input :title, :label => true %>      # => :label => "Choose a title..."
      <%= form.input :body, :label => true %>       # => :label => "Write something..."
      <%= form.input :section, :label => true %>    # => :label => I18n.t('activerecord.attributes.user.section')  or 'Section'
    <% end %>
    <% form.buttons do %>
      <%= form.commit_button true %>                # => "Update %{model}" (if we are in edit that is...)
    <% end %>
  <% end %>
</pre>

*6. Advanced I18n lookups*

For more flexible forms; Formtastic find translations using a bottom-up approach taking the following variables in account:

* @MODEL@, e.g. "post"
* @ACTION@, e.g. "edit"
* @KEY/ATTRIBUTE@, e.g. "title", :my_custom_key, ...

...in the following order:

1. @formtastic.{titles,labels,hints,actions}.MODEL.ACTION.ATTRIBUTE@ - by model and action
2. @formtastic.{titles,labels,hints,actions}.MODEL.ATTRIBUTE@ - by model
3. @formtastic.{titles,labels,hints,actions}.ATTRIBUTE@ - global default

...which means that you can define translations like this:

<pre>
  en:
    formtastic:
      labels:
        title: "Title"  # Default global value
        article:
          body: "Article content"
        post:
          new:
            title: "Choose a title..."
            body: "Write something..."
          edit:
            title: "Edit title"
            body: "Edit body"
</pre>

Values for @labels@/@hints@/@actions@ are can take values: @String@ (explicit value), @Symbol@ (i18n-lookup-key relative to the current "type", e.g. actions:), @true@ (force I18n lookup), @false@ (force no I18n lookup). Titles (legends) can only take: @String@ and @Symbol@ - true/false have no meaning.


h2. Semantic errors

You can show errors on base (by default) and any other attribute just passing it name to semantic_errors method:

<pre>
  <% semantic_form_for @post do |form| %>
    <%= form.semantic_errors :state %>
  <% end %>
</pre>


h2. ValidationReflection plugin

If you have the "ValidationReflection":http://github.com/redinger/validation_reflection plugin installed, you won't have to specify the @:required@ option (it checks the validations on the model instead).


h2. Configuration

Run @rails generate formtastic:install@ (Rails 3) or @./script/generate formtastic@ (Rails 2) to copy a commented out config file into @config/initializers/formtastic.rb@. You can "view the configuration file on GitHub":http://github.com/justinfrench/formtastic/blob/master/generators/formtastic/templates/formtastic.rb


h2. Form Generator

There's a Formtastic form code generator to make your transition to Formtastic easier. All you have to do is to *specify an existing model name*, and optionally specify view template framework (ERB/HAML), and you are good to go. *Note:* This won't overwrite any of your stuff.

h3. Basic usage

Rails 3:

<pre>
  $ rails generate formtastic:form ModelName
</pre>

Rails 2:

<pre>
  $ ./script/generate form ModelName
</pre>

The results are something like this, with the ERB code printed out to the terminal 

<pre>
  $ rails generate formtastic:form Post
  # ---------------------------------------------------------
  #  GENERATED FORMTASTIC CODE
  # ---------------------------------------------------------

  <% f.inputs do %>
    <%= f.input :title, :label => 'Title' %>
    <%= f.input :body, :label => 'Body' %>
    <%= f.input :published, :label => 'Published' %>
  <% end %>

  # ---------------------------------------------------------
   Copied to clipboard - just paste it!
</pre>

h3. Generating a partial with @--partial@

You can also ask Formtastic to *generate a partial* with the @--partial@ option, placing it in the correct location inside your @app/views@ directory:

<pre>
  $ rails generate formtastic:form Post --partial
      exists  app/views/posts
      create  app/views/posts/_form.html.erb
</pre>

h3. Specifying HAML instead of ERB with @--haml@

<pre>
  $ rails generate formtastic:form Post --haml
      exists  app/views/admin/posts
      create  app/views/admin/posts/_form.html.haml
</pre>

h3. Specifying controller namespace with @--controller@

<pre>
  $ rails generate formtastic:form Post --partial --controller admin/posts
      exists  app/views/admin/posts
      create  app/views/admin/posts/_form.html.erb
</pre>


h2. Custom Inputs

If you want to add your own input types to encapsulate your own logic or interface patterns, you can do so by subclassing SemanticFormBuilder and configuring Formtastic to use your custom builder class.

@Formtastic::SemanticFormHelper.builder = MyCustomBuilder@

Be aware that you should either set the options on custom builder or require it after setting options on formtastic default builder.

<pre>
  # OK
  Formtastic::SemanticFormBuilder.i18n_lookups_by_default = true
  require 'formtastic/my_custom_builder'
  Formtastic::SemanticFormHelper.builder = Formtastic::MyCustomBuilder
  
  # OK
  require 'formtastic/my_custom_builder'
  Formtastic::SemanticFormHelper.builder = Formtastic::MyCustomBuilder
  Formtastic::MyCustomBuilder.i18n_lookups_by_default = true
  
  # WRONG!
  require 'formtastic/my_custom_builder'
  Formtastic::SemanticFormBuilder.i18n_lookups_by_default = true
  Formtastic::SemanticFormHelper.builder = Formtastic::MyCustomBuilder
</pre>


h2. Security

By default formtastic escapes html entities in both labels and hints unless a string is marked as html_safe. If you are using an older rails version which doesn't know html_safe, or you want to globally turn this feature off, you can set the following in your initializer:

Formtastic::SemanticFormBuilder.escape_html_entities_in_hints_and_labels = false


h2. Dependencies

There are none, but...

* if you have the "ValidationReflection":http://github.com/redinger/validation_reflection plugin is installed, you won't have to specify the @:required@ option (it checks the validations on the model instead).
* if you want to use the @:country@ input, you'll need to install the "iso-3166-country-select plugin":http://github.com/rails/iso-3166-country-select (or any other country_select plugin with the same API).
* "rspec":http://github.com/dchelimsky/rspec/, "rspec_hpricot_matchers":http://rubyforge.org/projects/rspec-hpricot/ and "rcov":http://github.com/relevance/rcov gems (plus any of their own dependencies) are required for the test suite.


h2. Compatibility

* We're only testing Formtastic with the latest Rails 2.x and 3.x stable releases. Patches are welcome to allow backwards compatibility with older versions of Rails, of course.
* Formtastic, much like Rails 2, is very ActiveRecord-centric. Many people are using Formtastic (especially the rails3 branch) successfully with other ActiveModel-like ORMs and classes (DataMapper, MongoMapper, Mongoid, Authlogic, Devise...) but we're not guaranteeing anything at this stage. Patches are welcome, but it's not our core focus right now.
 

h2. How to contribute

Please ensure that you provide appropriate spec/test coverage and ensure the documentation is up-to-date.  Bonus points if you perform your changes in a clean topic branch rather than master, and if you create a pull request for your changes to be discussed and reviewed.

Please also keep your commits *atomic* so that they are more likely to apply cleanly.  That means that each commit should contain the smallest possible logical change.  Don't commit two features at once, don't update the gemspec at the same time you add a feature, don't fix a whole bunch of whitespace in a file at the same time you change a few lines, etc, etc.

For significant changes, you may wish to discuss your idea on the Formtastic Google group before coding to ensure that your change is likely to be accepted.  Formtastic relies heavily on i18n, so if you're unsure of the impact this has on your changes, please discuss them with the group.

See below for installation of a development environment.


h2. Development Environment

We currently support both Rails 2 and Rails 3, under Ruby 1.8.7-ish (and 1.9.2-ish). That means, at a bare minimum, you'll want to set-up two rvm gemsets to run your specs against. So, fork the project on Github, clone it, make some gemsets, run bundler, run your specs and then finally set-up an .rvmrc file that specifies Rails 3 as your default gemset and cd back into that directory to load in the .rvmrc file. Something like this:

<pre>
  $ cd ~/code/formtastic
  $ rvm gemset create formtastic      # If that's your thing
  $ rvm gemset use formtastic         # Add that to your .rvmrc too
  $ bundle install                    # Initial bundle command to build Gemfile.lock
  $ RAILS_2=true bundle update rails  # Updates gemfile to run agains rails 2
  $ RAILS_2=true rake                 # Run tests against rails 2
  $ bundle update rails               # Updates gemfile to run agains rails 3
  $ rake                              # Run tests against rails 3
</pre>


h2. Maintainers & Contributors

Formtastic is maintained by "Justin French":http://github.com/justinfrench, "Morton Jonuschat":http://github.com/yabawock and "Gabriel Sobrinho":http://github.com/sobrinho. "Denis Major":http://github.com/denismajor1 is doing some amazing documentation work in the wiki, and we very much appreciate the past efforts of "JosÃ© Valim":http://github.com/josevalim and "Jonas Grimfelt":http://github.com/grimen and over 40 other contributors.

@git shortlog -n -s --no-merges@


h2. Google Group, Twitter, etc

Please join the "Formtastic Google Group":http://groups.google.com.au/group/formtastic, especially if you'd like to talk about a new feature, or report a bug.

You can also "follow @formtastic on Twitter":http://twitter.com/formtastic for announcements, tutorials and awesome Formtastic links.


h2. Project Info

Formtastic is hosted on Github: "http://github.com/justinfrench/formtastic":http://github.com/justinfrench/formtastic, where your contributions, forkings, comments and feedback are greatly welcomed.


Copyright (c) 2007-2010 Justin French, released under the MIT license.
