h1. Formtastic

Formtastic is a Rails FormBuilder DSL (with some other goodies) to make it far easier to create beautiful, semantically rich, syntactically awesome, readily stylable and wonderfully accessible HTML forms in your Rails applications.

<a href='http://www.pledgie.com/campaigns/2178'><img alt='Click here to lend your support to: formtastic and make a donation at www.pledgie.com !' src='http://pledgie.com/campaigns/2178.png?skin_name=chrome' border='0' /></a>


h2. Compatibility

* Formtastic 2.0 is Rails 3.x compatible only
* Formtastic 1.x is compatible with both Rails 2 and 3, and is being maintained for bug fixes in the the "1.2-stable branch":https://github.com/justinfrench/formtastic/tree/1.2-stable. View the README in that branch for installation instructions, etc.
* Formtastic, much like Rails, is very ActiveRecord-centric. Many are successfully using other ActiveModel-like ORMs and objects (DataMapper, MongoMapper, Mongoid, Authlogic, Devise...) but we're not guaranteeing full compatibility at this stage. Patches are welcome!
 

h2. The Story

One day, I finally had enough, so I opened up my text editor, and wrote a DSL for how I'd like to author forms:

<pre>
  <%= semantic_form_for @article do |form| %>

    <%= form.inputs :name => "Basic" do %>
      <%= form.input :title %>
      <%= form.input :body %>
      <%= form.input :section %>
      <%= form.input :publication_state, :as => :radio %>
      <%= form.input :category %>
      <%= form.input :allow_comments, :label => "Allow commenting on this article" %>
    <% end %>

    <%= form.inputs :name => "Advanced" do %>
      <%= form.input :keywords, :required => false, :hint => "Example: ruby, rails, forms" %>
      <%= form.input :extract, :required => false %>
      <%= form.input :description, :required => false %>
      <%= form.input :url_title, :required => false %>
    <% end %>

    <%= form.inputs :name => "Author", :for => :author do |author_form| %>
      <%= author_form.input :first_name %>
      <%= author_form.input :last_name %>
    <% end %>

    <%= form.buttons do %>
      <%= form.commit_button %>
    <% end %>

  <% end %>
</pre>

I also wrote the accompanying HTML output I expected, favoring something very similar to the fieldsets, lists and other semantic elements Aaron Gustafson presented in "Learning to Love Forms":http://www.slideshare.net/AaronGustafson/learning-to-love-forms-web-directions-south-07, hacking together enough Ruby to prove it could be done.


h2. It's awesome because...

* It can handle @belongs_to@ associations (like Post belongs_to :author), rendering a select or set of radio inputs with choices from the parent model.
* It can handle @has_many@ and @has_and_belongs_to_many@ associations (like: Post has_many :tags), rendering a multi-select with choices from the child models.
* It's Rails 3 compatible (including nested forms).
* It has internationalization (I18n)!
* It's _really_ quick to get started with a basic form in place (4 lines), then go back to add in more detail if you need it.
* There's heaps of elements, id and class attributes for you to hook in your CSS and JS.
* It handles real world stuff like inline hints, inline error messages & help text.
* It doesn't hijack or change any of the standard Rails form inputs, so you can still use them as expected (even mix and match).
* It's got absolutely awesome spec coverage.
* There's a bunch of people using and working on it (it's not just one developer building half a solution).
* It has growing HTML5 support (new inputs like email/phone/search, new attributes like required/min/max/step/placeholder)


h2. Opinions

* It should be easier to do things the right way than the wrong way.
* Sometimes _more mark-up_ is better.
* Elements and attribute hooks are _gold_ for stylesheet authors.
* Make the common things we do easy, yet ensure uncommon things are still possible.


h2. Documentation

RDoc documentation _should_ be automatically generated after each commit and made available on the "rdoc.info website":http://rdoc.info/projects/justinfrench/formtastic.


h2. Installation

Simply add Formtastic to your Gemfile and bundle it up:

<pre>
  gem 'formtastic'
</pre>

Run the installation generator:

<pre>
  $ rails generate formtastic:install 
</pre>


h2. Stylesheets

A proof-of-concept set of stylesheets are provided which you can include in your layout. Customization is best achieved by overriding these styles in an additional stylesheet.

h3. Stylesheet usage in Rails < 3.1:

<pre>
  $ rails generate formtastic:install 
</pre>

<pre>
  # app/views/layouts/application.html.erb
  <%= stylesheet_link_tag 'formtastic', 'my_formtastic_changes' %>
  <!--[if IE 6]><%= stylesheet_link_tag 'formtastic_ie6' %><![endif]-->
  <!--[if IE 7]><%= stylesheet_link_tag 'formtastic_ie7' %><![endif]-->
</pre>

h3. Stylesheet usage in Rails >= 3.1:

Rails 3.1 introduces an asset pipeline that allows plugins like Formtastic to serve their own Stylesheets, Javascripts, etc without having to run generators that copy them accross to the host application. Formtastic makes three stylesheets available as an Engine, you just need to require them in your global stylesheets.

<pre>
  # app/assets/stylesheets/application.css
  *= require formtastic
  *= require my_formtastic_changes
  
  # app/assets/stylesheets/ie6.css
  *= require formtastic_ie6
  
  # app/assets/stylesheets/ie7.css
  *= require formtastic_ie7
</pre>

<pre>
  # app/views/layouts/application.html.erb
  <%= stylesheet_link_tag 'application' %>
  <!--[if IE 6]><%= stylesheet_link_tag 'ie6' %><![endif]-->
  <!--[if IE 7]><%= stylesheet_link_tag 'ie7' %><![endif]-->
</pre>



h2. Usage

Forms are really boring to code... you want to get onto the good stuff as fast as possible.

This renders a set of inputs (one for _most_ columns in the database table, and one for each ActiveRecord @belongs_to@-association), followed by a submit button:

<pre>
  <%= semantic_form_for @user do |form| %>
    <%= form.inputs %>
    <%= form.buttons %>
  <% end %>
</pre>

This is a great way to get something up fast, but like scaffolding, it's *not recommended for production*. Don't be so lazy!

To specify the order of the fields, skip some of the fields or even add in fields that Formtastic couldn't infer. You can pass in a list of field names to @inputs@ and list of button names to @buttons@:

<pre>
  <%= semantic_form_for @user do |form| %>
    <%= form.inputs :title, :body, :section, :categories, :created_at %>
    <%= form.buttons :commit %>
  <% end %>
</pre>

You probably want control over the input type Formtastic uses for each field. You can expand the @inputs@ and @buttons@ to block helper format and use the @:as@ option to specify an exact input type:

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.inputs do %>
      <%= form.input :title %>
      <%= form.input :body %>
      <%= form.input :section, :as => :radio %>
      <%= form.input :categories %>
      <%= form.input :created_at, :as => :string %>
    <% end %>
    <%= form.buttons do %>
      <%= form.commit_button %>
    <% end %>
  <% end %>
</pre>

If you want to customize the label text, or render some hint text below the field, specify which fields are required/optional, or break the form into two fieldsets, the DSL is pretty comprehensive:

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.inputs "Basic", :id => "basic" do %>
      <%= form.input :title %>
      <%= form.input :body %>
    <% end %>
    <%= form.inputs :name => "Advanced Options", :id => "advanced" do %>
      <%= form.input :slug, :label => "URL Title", :hint => "Created automatically if left blank", :required => false %>
      <%= form.input :section, :as => :radio %>
      <%= form.input :user, :label => "Author", :member_label => :full_name %>
      <%= form.input :categories, :required => false %>
      <%= form.input :created_at, :as => :string, :label => "Publication Date", :required => false %>
    <% end %>
    <%= form.buttons do %>
      <%= form.commit_button %>
    <% end %>
  <% end %>
</pre>

You can create forms for nested resources:

<pre>
	<%= semantic_form_for [@author, @post] do |form| %>
</pre>

Nested forms are also supported (don't forget your models need to be setup correctly with @accepts_nested_attributes_for@). You can do it in the Rails way:

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.inputs :title, :body, :created_at %>
    <%= form.semantic_fields_for :author do |author| %>
      <%= author.inputs :first_name, :last_name, :name => "Author" %>
    <% end %>
    <%= form.buttons %>
  <% end %>
</pre>

Or the Formtastic way with the @:for@ option:

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.inputs :title, :body, :created_at %>
    <%= form.inputs :first_name, :last_name, :for => :author, :name => "Author" %>
    <%= form.buttons %>
  <% end %>
</pre>

When working in has many association, you can even supply @"%i"@ in your fieldset name; they will be properly interpolated with the child index. For example:

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.inputs %>
    <%= form.inputs :name => 'Category #%i', :for => :categories %>
    <%= form.buttons %>
  <% end %>
</pre>

If you have more than one form on the same page, it may lead to HTML invalidation because of the way HTML element id attributes are assigned. You can provide a namespace for your form to ensure uniqueness of id attributes on form elements. The namespace attribute will be prefixed with underscore on the generate HTML id. For example:

<pre>
  <%= semantic_form_for(@post, :namespace => 'cat_form') do |form| %>
    <%= form.input :title %>        # id="cat_form_post_title"
    <%= form.input :body %>         # id="cat_form_post_body"
    <%= form.input :created_at %>   # id="cat_form_post_created_at"
    <%= form.buttons %>
  <% end %>
</pre>

Customize HTML attributes for any input using the @:input_html@ option. Typically this is used to disable the input, change the size of a text field, change the rows in a textarea, or even to add a special class to an input to attach special behavior like "autogrow":http://plugins.jquery.com/project/autogrowtextarea textareas:

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.input :title,      :input_html => {  :cols => 10 } %>
    <%= form.input :body,       :input_html => { :class => 'autogrow', :rows => 10, :cols => 20, :maxlength => 10  } %>
    <%= form.input :created_at, :input_html => { :disabled => true } %>
    <%= form.buttons %>
  <% end %>
</pre>

The same can be done for buttons with the @:button_html@ option:

<pre>
  <%= semantic_form_for @post do |form| %>
    ...
    <%= form.buttons do %>
      <%= form.commit_button :button_html => { :class => "primary", :disable_with => 'Wait...' } %>
    <% end %>
  <% end %>
</pre>

Customize the HTML attributes for the @<li>@ wrapper around every input with the @:wrapper_html@ option hash. There's one special key in the hash: (@:class@), which will actually _append_ your string of classes to the existing classes provided by Formtastic (like @"required string error"@).

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.input :title, :wrapper_html => { :class => "important" } %>
    <%= form.input :body %>
    <%= form.input :description, :wrapper_html => { :style => "display:none;" } %>
    ...
  <% end %>
</pre>

Customize the default class used for hints on each attribute or globally in the @config/formtastic.rb@ file. Similarly, you can customize the error classes on an attribute level or globally.

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.input :title, :hint_class => 'custom-html-class', :error_class => 'custom-error-class' %>
  <% end %>
</pre>

Many inputs provide a collection of options to choose from (like @:select@, @:radio@, @:check_boxes@, @:boolean@). In many cases, Formtastic can find choices through the model associations, but if you want to use your own set of choices, the @:collection@ option is what you want.  You can pass in an Array of objects, an array of Strings, a Hash... Throw almost anything at it! Examples:

<pre>
  f.input :authors, :as => :check_boxes, :collection => User.find(:all, :order => "last_name ASC")
  f.input :authors, :as => :check_boxes, :collection => current_user.company.users.active
  f.input :authors, :as => :check_boxes, :collection => [@justin, @kate]
  f.input :authors, :as => :check_boxes, :collection => ["Justin", "Kate", "Amelia", "Gus", "Meg"]
  f.input :author,  :as => :select,      :collection => Author.find(:all)
  f.input :author,  :as => :select,      :collection => { @justin.name => @justin.id, @kate.name => @kate.id }
  f.input :author,  :as => :select,      :collection => ["Justin", "Kate", "Amelia", "Gus", "Meg"]
  f.input :author,  :as => :radio,       :collection => User.find(:all)
  f.input :author,  :as => :radio,       :collection => [@justin, @kate]
  f.input :author,  :as => :radio,       :collection => { @justin.name => @justin.id, @kate.name => @kate.id }
  f.input :author,  :as => :radio,       :collection => ["Justin", "Kate", "Amelia", "Gus", "Meg"]
  f.input :admin,   :as => :radio,       :collection => ["Yes!", "No"]
</pre>


h2. The Available Inputs

The Formtastic input types:

* @:select@ - a select menu. Default for ActiveRecord associations: @belongs_to@, @has_many@, and @has_and_belongs_to_many@.
* @:check_boxes@ - a set of check_box inputs. Alternative to @:select@ for ActiveRecord-associations: @has_many@, and @has_and_belongs_to_many@.
* @:radio@ - a set of radio inputs. Alternative to @:select@ for ActiveRecord-associations: @belongs_to@.
* @:time_zone@ - a select input. Default for column types: @:string@ with name matching @"time_zone"@.
* @:password@ - a password input. Default for column types: @:string@ with name matching @"password"@.
* @:text@ - a textarea. Default for column types: @:text@.
* @:date@ - a date select. Default for column types: @:date@.
* @:datetime@ - a date and time select. Default for column types: @:datetime@ and @:timestamp@.
* @:time@ - a time select. Default for column types: @:time@.
* @:boolean@ - a checkbox. Default for column types: @:boolean@.
* @:string@ - a text field. Default for column types: @:string@.
* @:number@ - a text field (just like string). Default for  column types: @:integer@, @:float@, and @:decimal@.
* @:file@ - a file field. Default for file-attachment attributes matching: "paperclip":http://github.com/thoughtbot/paperclip or "attachment_fu":http://github.com/technoweenie/attachment_fu.
* @:country@ - a select menu of country names. Default for column types: :string with name @"country"@ - requires a *country_select* plugin to be installed.
* @:email@ - a text field (just like string). Default for columns with name matching @"email"@. New in HTML5. Works on some mobile browsers already.
* @:url@ - a text field (just like string). Default for columns with name matching @"url"@. New in HTML5. Works on some mobile browsers already.
* @:phone@ - a text field (just like string). Default for columns with name matching @"phone"@ or @"fax"@. New in HTML5.
* @:search@ - a text field (just like string). Default for columns with name matching @"search"@. New in HTML5. Works on Safari.
* @:hidden@ - a hidden field. Creates a hidden field (added for compatibility).
* @:range@ - a slider field.

The comments in the code are pretty good for each of these (what it does, what the output is, what the options are, etc.) so go check it out.


h2. Delegation for label lookups

Formtastic decides which label to use in the following order:

<pre>
  1. :label             # :label => "Choose Title"
  2. Formtastic i18n    # if either :label => true || i18n_lookups_by_default = true (see Internationalization)
  3. Activerecord i18n  # if localization file found for the given attribute
  4. label_str_method   # if nothing provided this defaults to :humanize but can be set to a custom method 
</pre>

h2. Internationalization (I18n)

h3. Basic Localization

Formtastic has some neat I18n-features. ActiveRecord object names and attributes are, by default, taken from calling @@object.human_name@ and @@object.human_attribute_name(attr)@ respectively. There are a few words specific to Formtastic that can be translated. See @lib/locale/en.yml@ for more information.

Basic localization (labels only, with ActiveRecord):

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.input :title %>        # => :label => I18n.t('activerecord.attributes.user.title')    or 'Title'
    <%= form.input :body %>         # => :label => I18n.t('activerecord.attributes.user.body')     or 'Body'
    <%= form.input :section %>      # => :label => I18n.t('activerecord.attributes.user.section')  or 'Section'
  <% end %>
</pre>

*Note:* This is perfectly fine if you just want your labels/attributes and/or models to be translated using *ActiveRecord I18n attribute translations*, and you don't use input hints and legends. But what if you do? And what if you don't want same labels in all forms?

h3. Enhanced Localization (Formtastic I18n API)

Formtastic supports localized *labels*, *hints*, *legends*, *actions* using the I18n API for more advanced usage. Your forms can now be DRYer and more flexible than ever, and still fully localized. This is how:

*1. Enable I18n lookups by default (@config/initializers/formtastic.rb@):*

<pre>
  Formtastic::FormBuilder.i18n_lookups_by_default = true
</pre>

*2. Add some cool label-translations/variants (@config/locale/en.yml@):*

<pre>
  en:
    formtastic:
      titles:
        post_details: "Post details"
      labels:
        post:
          title: "Your Title"
          body: "Write something..."
          edit:
            title: "Edit title"
      hints:
        post:
          title: "Choose a good title for your post."
          body: "Write something inspiring here."
      placeholders:
        post:
          title: "Title your post"
          slug: "Leave blank for an automatically generated slug"
        user:
          email: "you@yours.com"
      actions:
        create: "Create my %{model}"
        update: "Save changes"
        dummie: "Launch!"
</pre>

*3. ...and now you'll get:*

<pre>
  <%= semantic_form_for Post.new do |form| %>
    <%= form.inputs do %>
      <%= form.input :title %>      # => :label => "Choose a title...", :hint => "Choose a good title for your post."
      <%= form.input :body %>       # => :label => "Write something...", :hint => "Write something inspiring here."
      <%= form.input :section %>    # => :label => I18n.t('activerecord.attributes.user.section')  or 'Section'
    <% end %>
    <%= form.buttons do %>
      <%= form.commit_button %>     # => "Create my %{model}"
    <% end %>
  <% end %>
</pre>

*4. Localized titles (a.k.a. legends):*

_Note: Slightly different because Formtastic can't guess how you group fields in a form. Legend text can be set with first (as in the sample below) specified value, or :name/:title options - depending on what flavor is preferred._

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.inputs :post_details do %>   # => :title => "Post details"
      # ...
    <% end %>
    # ...
<% end %>
</pre>

*5. Override I18n settings:*

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.inputs do %>
      <%= form.input :title %>      # => :label => "Choose a title...", :hint => "Choose a good title for your post."
      <%= form.input :body, :hint => false %>                 # => :label => "Write something..."
      <%= form.input :section, :label => 'Some section' %>    # => :label => 'Some section'
    <% end %>
    <%= form.buttons do %>
      <%= form.commit_button :dummie %>     # => "Launch!"
    <% end %>
  <% end %>
</pre>

If I18n-lookups is disabled, i.e.:

<pre>
  Formtastic::FormBuilder.i18n_lookups_by_default = false
</pre>

...then you can enable I18n within the forms instead:

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.inputs do %>
      <%= form.input :title, :label => true %>      # => :label => "Choose a title..."
      <%= form.input :body, :label => true %>       # => :label => "Write something..."
      <%= form.input :section, :label => true %>    # => :label => I18n.t('activerecord.attributes.user.section')  or 'Section'
    <% end %>
    <%= form.buttons do %>
      <%= form.commit_button true %>                # => "Update %{model}" (if we are in edit that is...)
    <% end %>
  <% end %>
</pre>

*6. Advanced I18n lookups*

For more flexible forms; Formtastic finds translations using a bottom-up approach taking the following variables in account:

* @MODEL@, e.g. "post"
* @ACTION@, e.g. "edit"
* @KEY/ATTRIBUTE@, e.g. "title", :my_custom_key, ...

...in the following order:

1. @formtastic.{titles,labels,hints,actions}.MODEL.ACTION.ATTRIBUTE@ - by model and action
2. @formtastic.{titles,labels,hints,actions}.MODEL.ATTRIBUTE@ - by model
3. @formtastic.{titles,labels,hints,actions}.ATTRIBUTE@ - global default

...which means that you can define translations like this:

<pre>
  en:
    formtastic:
      labels:
        title: "Title"  # Default global value
        article:
          body: "Article content"
        post:
          new:
            title: "Choose a title..."
            body: "Write something..."
          edit:
            title: "Edit title"
            body: "Edit body"
</pre>

Values for @labels@/@hints@/@actions@ are can take values: @String@ (explicit value), @Symbol@ (i18n-lookup-key relative to the current "type", e.g. actions:), @true@ (force I18n lookup), @false@ (force no I18n lookup). Titles (legends) can only take: @String@ and @Symbol@ - true/false have no meaning.


h2. Semantic errors

You can show errors on base (by default) and any other attribute just passing it name to semantic_errors method:

<pre>
  <%= semantic_form_for @post do |form| %>
    <%= form.semantic_errors :state %>
  <% end %>
</pre>


h2. Modified & Custom Inputs

You can modify existing inputs, subclass them, or create your own from scratch. Here's the basic process:

* Create a file in @app/inputs@ with a filename ending in @_input.rb@. For example, @app/inputs/hat_size_input.rb@. Formtastic will automatically look in @app/inputs@ and find the file.
* In that file, declare a classname ending in @Input@. For example, @class HatSizeInput@. It must have a @to_html@ method for rendering.
* To use that input, leave off the word "input" in your @as@ statement. For example, @f.input(:size, :as => :hat_size)@

Specific examples follow.

h3. Changing Existing Input Behavior

To modify the behavior of @StringInput@, subclass it in a new file, @app/inputs/string_input.rb@:

<pre>
  class StringInput < Formtastic::Inputs::StringInput
    def to_html
      puts "this is my modified version of StringInput"
      super
    end
  end
</pre>

You can use your modified version with @:as => :string@.

h3. Creating New Inputs Based on Existing Ones

To create your own new types of inputs based on existing inputs, the process is similar. For example, to create @FlexibleTextInput@ based on @StringInput@, put the following in @app/inputs/flexible_text_input.rb@:

<pre>
  class FlexibleTextInput < Formtastic::Inputs::StringInput
    def input_html_options
      super.merge(:class => "flexible-text-area")
    end
  end
</pre>

You can use your new input with @:as => :flexible_text@.

h3. Creating New Inputs From Scratch

To create a custom @DatePickerInput@ from scratch, put the following in @app/inputs/date_picker_input.rb@:

<pre>
  class DatePickerInput
    include Formtastic::Inputs::Base
    def to_html
      # ...
    end
  end
</pre>

You can use your new input with @:as => :date_picker@.

h3. Don't subclass Formtastic::FormBuilder anymore

It was previously recommended in Formtastic 1.x to subclass Formtastic::FormBuilder to add your own inputs. This is no longer recommended in Formtastic 2, and will not work as expected.


h2. Security

By default, Formtastic escapes HTML entities in both labels and hints unless a string is marked as html_safe. If you are using an older rails version which doesn't know html_safe, or you want to globally turn this feature off, you can set the following in your initializer:

Formtastic::FormBuilder.escape_html_entities_in_hints_and_labels = false


h2. Dependencies

There are none, but...

* If you want to use the @:country@ input, you'll need to install the "country-select plugin":https://github.com/chrislerum/country_select (or any other country_select plugin with the same API).
* "rspec":http://github.com/dchelimsky/rspec/, "rspec_hpricot_matchers":http://rubyforge.org/projects/rspec-hpricot/ and "rcov":http://github.com/relevance/rcov gems (plus any of their own dependencies) are required for the test suite.


h2. How to contribute

Please ensure that you provide appropriate spec/test coverage and ensure the documentation is up-to-date.  Bonus points if you perform your changes in a clean topic branch rather than master, and if you create a pull request for your changes to be discussed and reviewed.

Please also keep your commits *atomic* so that they are more likely to apply cleanly.  That means that each commit should contain the smallest possible logical change.  Don't commit two features at once, don't update the gemspec at the same time you add a feature, don't fix a whole bunch of whitespace in a file at the same time you change a few lines, etc, etc.

For significant changes, you may wish to discuss your idea on the Formtastic Google group before coding to ensure that your change is likely to be accepted.  Formtastic relies heavily on i18n, so if you're unsure of the impact this has on your changes, please discuss them with the group.

See below for installation of a development environment.


h2. Google Group, Twitter, etc

Please join the "Formtastic Google Group":http://groups.google.com.au/group/formtastic, especially if you'd like to talk about a new feature, or report a bug.

You can also "follow @formtastic on Twitter":http://twitter.com/formtastic for announcements, tutorials and awesome Formtastic links.

h2. Project Info

Formtastic was created by "Justin French":http://www.justinfrench.com with contributions from over 100 awesome developers.

Run @git shortlog -n -s@ to see the awesome.

The project is hosted on Github: "http://github.com/justinfrench/formtastic":http://github.com/justinfrench/formtastic, where your contributions, forkings, comments, issues and feedback are greatly welcomed.

Copyright (c) 2007-2010 Justin French, released under the MIT license.
